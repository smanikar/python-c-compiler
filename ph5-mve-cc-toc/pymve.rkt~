#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 49 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 10 #"Monospace\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 1158 0 26 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 22 #"; Srikanth Manikarnike"
0 0 4 29 1 #"\n"
0 0 17 3 10 #"; U0706564"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 18 #"\"pytoc-common.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 2 #"  "
0 0 14 3 6 #"srfi/1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"require"
0 0 17 3 19 #" \"scheme-to-c.scm\")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"mutable-set"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"mutable?"
0 0 4 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"set-member?"
0 0 4 3 1 #" "
0 0 14 3 11 #"mutable-set"
0 0 4 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";mark-mutable : exp -> void"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 9 #";(printf "
0 0 17 3 1 #"\""
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 18 #"mark-mutable ~s~n\""
0 0 17 3 5 #" exp)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 7 #"program"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 15 3 3 #"def"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 17 3 10 #";(printf \""
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 7 #"program"
0 0 17 3 1 #" "
0 0 17 3 8 #"def=~s~n"
0 0 17 3 1 #" "
0 0 17 3 8 #"exp=~s~n"
0 0 17 3 10 #"\" def exp)"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 15 3 3 #"def"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 2 #")]"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 15 3 2 #"\316\273"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 5 #"cexp1"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 5 #"cexp2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 5 #"cexp1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 5 #"cexp2"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 9 #"set-then!"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"cexp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 17 3 10 #";(printf \""
0 0 17 3 6 #"inside"
0 0 17 3 1 #" "
0 0 17 3 9 #"set-then!"
0 0 17 3 1 #" "
0 0 17 3 4 #"~s~n"
0 0 17 3 6 #"\" var)"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 11 #"mutable-set"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-union"
0 0 4 3 1 #" "
0 0 14 3 11 #"mutable-set"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"set"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"cexp"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 4 #"dict"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 5 #"aexp1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 5 #"aexp1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 5 #"tuple"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 8 #"py-list*"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"?"
0 0 4 3 1 #" "
0 0 14 3 7 #"atomic?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"args"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #";["
0 0 17 3 1 #"`"
0 0 17 3 2 #"()"
0 0 17 3 8 #" (void)]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"This"
0 0 19 3 1 #" "
0 0 19 3 7 #"shouldn"
0 0 19 3 1 #"'"
0 0 19 3 9 #"t happen\""
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";replace-mutable : exp -> void"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 9 #";(printf "
0 0 17 3 1 #"\""
0 0 17 3 2 #"in"
0 0 17 3 22 #" replace-mutable ~s~n\""
0 0 17 3 5 #" exp)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 7 #"program"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 15 3 3 #"def"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 17 3 13 #";(printf \"in "
0 0 17 3 7 #"program"
0 0 17 3 1 #" "
0 0 17 3 8 #"def=~s~n"
0 0 17 3 1 #" "
0 0 17 3 18 #"exp=~s~n\" def exp)"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 7 #"program"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 15 3 3 #"def"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 22 3 2 #")]"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 15 3 2 #"\316\273"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 26 3 1 #","
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 9 #";(printf "
0 0 17 3 11 #"\"in lambda "
0 0 17 3 24 #"****~nvar=~s~nbody=~s~n\""
0 0 17 3 1 #" "
0 0 17 3 3 #"var"
0 0 17 3 6 #" body)"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 4 3 1 #" "
0 0 17 3 27 #";,(map replace-mutable var)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 3 41 #"                                         "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 3 #"))]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 5 #"cexp1"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 5 #"cexp2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 5 #"cexp1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 5 #"cexp2"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 9 #"set-then!"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"cexp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 17 3 10 #";(printf \""
0 0 17 3 6 #"inside"
0 0 17 3 1 #" "
0 0 17 3 9 #"set-then!"
0 0 17 3 11 #" ~s~n\" var)"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"is-mutable?"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 9 #"set-then!"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 50 #"                                                  "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-cell"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 50 #"                                                  "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-cell!"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 61
#"                                                             "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"cexp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 9 #"set-then!"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 50 #"                                                  "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 50 #"                                                  "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"cexp"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 4 #"dict"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"keys"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 6 #"values"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 20 3 1 #"`"
0 0 14 3 4 #"dict"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"zip"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"keys"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 48 #"                                                "
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 6 #"values"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 2 #";`"
0 0 17 3 1 #"("
0 0 17 3 4 #"dict"
0 0 17 3 1 #" "
0 0 17 3 1 #","
0 0 17 3 1 #"("
0 0 17 3 3 #"map"
0 0 17 3 1 #" "
0 0 17 3 15 #"replace-mutable"
0 0 17 3 6 #" aexp)"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 17 3 2 #";,"
0 0 17 3 1 #"("
0 0 17 3 3 #"map"
0 0 17 3 1 #" "
0 0 17 3 15 #"replace-mutable"
0 0 17 3 9 #" aexp1))]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 5 #"tuple"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 4 3 3 #"   "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 5 #"tuple"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 8 #"py-list*"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 8 #"py-list*"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"?"
0 0 4 3 1 #" "
0 0 14 3 11 #"is-mutable?"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 12 #";`(get-cell "
0 0 17 3 6 #",exp)]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 3 #";=>"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 20 #"replace-mutable-atom"
0 0 4 3 2 #"  "
0 0 14 3 3 #"exp"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"aexp"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 5 #"aexps"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 4 #"aexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 5 #"aexps"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"?"
0 0 4 3 1 #" "
0 0 14 3 7 #"atomic?"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 7 #";`,exp]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 4 #"; =>"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"is-mutable?"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 9 #"set-then!"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-cell"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-cell!"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 20 #"replace-mutable-atom"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 20 3 1 #"`"
0 0 26 3 1 #","
0 0 14 3 3 #"exp"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"This"
0 0 19 3 1 #" "
0 0 19 3 7 #"shouldn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 6 #"happen"
0 0 19 3 5 #" too\""
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";replace-mutable-atom : exp -> list"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"replace-mutable-atom"
0 0 4 3 2 #"  "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 8 #"get-cell"
0 0 4 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #"; is-mutable? : exp -> bool"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"is-mutable?"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"mutable?"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"global?"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 2 #"#t"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 9 #"; program"
0 0 17 3 1 #" "
0 0 17 3 1 #":"
0 0 17 3 1 #" "
0 0 17 3 11 #"exp -> void"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"program"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"mark-globals!"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 9 #";(printf "
0 0 17 3 14 #"\"globals=~s~n\""
0 0 17 3 9 #" globals)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #";("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 15 #"\"mutables=~s~n\""
0 0 17 3 13 #" mutable-set)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"pretty-write"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"replace-mutable"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"program"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"read"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7       11533 4           0 0           0 1921 0 17 3 55
#";------------------------------------------------------"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 16 #"; void : -> void"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 20 3 2 #"#f"
0 0 2 3 1 #" "
0 0 20 3 2 #"#t"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 40 #"; tagged-list? : symbol value -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 14 3 3 #"tag"
0 0 2 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 14 3 3 #"tag"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 33 #"; char->natural : char -> natural"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"char->natural"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"char->integer"
0 0 2 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 2 #"-2"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 40 #"; integer->char-list : integer -> string"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"integer->char-list"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 24 #"; gensym-count : integer"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 12 #"gensym-count"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 27 #"; gensym : symbol -> symbol"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 6 #"gensym"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 14 3 6 #"params"
0 0 2 29 1 #"\n"
0 0 2 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 2 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 21 #"                     "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 2 29 1 #"\n"
0 0 2 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 2 3 1 #" "
0 0 14 3 12 #"gensym-count"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 12 #"gensym-count"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 29 1 #"\n"
0 0 2 3 40 #"                                        "
0 0 19 3 3 #"\"$\""
0 0 2 29 1 #"\n"
0 0 2 3 40 #"                                        "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 12 #"gensym-count"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 21 #"                     "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 2 29 1 #"\n"
0 0 2 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 2 3 1 #" "
0 0 14 3 12 #"gensym-count"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 12 #"gensym-count"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 40 #"                                        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 6 #"params"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 40 #"                                        "
0 0 19 3 3 #"\"$\""
0 0 2 29 1 #"\n"
0 0 2 3 40 #"                                        "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 2 3 1 #" "
0 0 14 3 12 #"gensym-count"
0 0 22 3 7 #")))))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 47 #"; member : symbol sorted-set[symbol] -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"member"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 20 3 2 #"#t"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 6 #"member"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 37 #"; symbol<? : symbol symobl -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"symbol<?"
0 0 2 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 2 3 1 #" "
0 0 14 3 4 #"sym2"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"string<?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 2 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 2 3 1 #" "
0 0 14 3 4 #"sym2"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 58
#"; insert : symbol sorted-set[symbol] -> sorted-set[symbol]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 2 #"))"
0 0 2 3 7 #"       "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 8 #"symbol<?"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 2 #"))"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 7 #")))))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 58
#"; remove : symbol sorted-set[symbol] -> sorted-set[symbol]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"remove"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"remove"
0 0 2 3 1 #" "
0 0 14 3 3 #"sym"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 6 #"))))))"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 2 29 1 #"\n"
0 0 17 3 69
(
 #"; union : sorted-set[symbol] sorted-set[symbol] -> sorted-set[symbol"
 #"]"
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"union"
0 0 2 3 1 #" "
0 0 14 3 4 #"set1"
0 0 2 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 17 3 59
#"; NOTE: This should be implemented as merge for efficiency."
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 14 3 4 #"set2"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"insert"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"union"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 74
(
 #"; difference : sorted-set[symbol] sorted-set[symbol] -> sorted-set[s"
 #"ymbol]"
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"difference"
0 0 2 3 1 #" "
0 0 14 3 4 #"set1"
0 0 2 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 17 3 40 #"; NOTE: This can be similarly optimized."
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 14 3 4 #"set1"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"difference"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"remove"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 36 #"; reduce : (A A -> A) list[A] A -> A"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"reduce"
0 0 2 3 1 #" "
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 2 3 1 #" "
0 0 14 3 4 #"init"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 14 3 4 #"init"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"reduce"
0 0 2 3 1 #" "
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 4 #"init"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 38 #"; azip : list[A] list[B] -> alist[A,B]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"azip"
0 0 2 3 1 #" "
0 0 14 3 5 #"list1"
0 0 2 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"azip"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 5 #"list1"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 5 #"list2"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 46 #"; assq-remove-key : alist[A,B] A -> alist[A,B]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"assq-remove-key"
0 0 2 3 1 #" "
0 0 14 3 3 #"env"
0 0 2 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 15 #"assq-remove-key"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"assq-remove-key"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 3 #"env"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 53 #"; assq-remove-keys : alist[A,B] list[A] -> alist[A,B]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"assq-remove-keys"
0 0 2 3 1 #" "
0 0 14 3 3 #"env"
0 0 2 3 1 #" "
0 0 14 3 4 #"keys"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 4 #"keys"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 14 3 3 #"env"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 16 #"assq-remove-keys"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"assq-remove-key"
0 0 2 3 1 #" "
0 0 14 3 3 #"env"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 4 #"keys"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 4 #"keys"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 38 #";; Data type predicates and accessors."
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 25 #"; const? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"const?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"integer?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"boolean?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 23 #"; ref? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ref?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 23 #"; let? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"let?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 3 #"let"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 46 #"; let->bindings : let-exp -> alist[symbol,exp]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"let->bindings"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 27 #"; let->exp : let-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"let->exp"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 43 #"; let->bound-vars : let-exp -> list[symbol]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"let->bound-vars"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 34 #"; let->args : let-exp -> list[exp]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"let->args"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 26 #"; letrec? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"letrec?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"letrec"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 52 #"; letrec->bindings : letrec-exp -> alist[symbol,exp]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"letrec->bindings"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 33 #"; letrec->exp : letrec-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"letrec->exp"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 42 #"; letrec->exp : letrec-exp -> list[symbol]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"letrec->bound-vars"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 39 #"; letrec->exp : letrec-exp -> list[exp]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"letrec->args"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 26 #"; lambda? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 46 #"; lambda->formals : lambda-exp -> list[symbol]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"lambda->formals"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 33 #"; lambda->exp : lambda-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"lambda->exp"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 22 #"; if? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 31 #"; if->condition : if-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"if->condition"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 26 #"; if->then : if-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"if->then"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 26 #"; if->else : if-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"if->else"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"cadddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 23 #"; app? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"app?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 27 #"; app->fun : app-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"app->fun"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 34 #"; app->args : app-exp -> list[exp]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"app->args"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 24 #"; prim? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"prim?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"display"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 25 #"; begin? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"begin?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 38 #"; begin->exps : begin-exp -> list[exp]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 11 #"begin->exps"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 23 #"; set! : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"set!?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 29 #"; set!->var : set!-exp -> var"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set!->var"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 29 #"; set!->exp : set!-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set!->exp"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 27 #"; closure? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"closure?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"closure"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 35 #"; closure->lam : closure-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"closure->lam"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 35 #"; closure->env : closure-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"closure->env"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 28 #"; env-make? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"env-make?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"env-make"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 39 #"; env-make->id : env-make-exp -> env-id"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"env-make->id"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 49 #"; env-make->fields : env-make-exp -> list[symbol]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"env-make->fields"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 3 #"car"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 46 #"; env-make->values : env-make-exp -> list[exp]"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"env-make->values"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 26 #"; env-get? : exp -> boolen"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"env-get?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"env-get"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 37 #"; env-get->id : env-get-exp -> env-id"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"env-get->id"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 40 #"; env-get->field : env-get-exp -> symbol"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"env-get->field"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 35 #"; env-get->env : env-get-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"env-get->env"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"cadddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 39 #"; set-cell!? : set-cell!-exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"set-cell!?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"set-cell!"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 40 #"; set-cell!->cell : set-cell!-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"set-cell!->cell"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 41 #"; set-cell!->value : set-cell!-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"set-cell!->value"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 24 #"; cell? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"cell?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 31 #"; cell->value : cell-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"cell->value"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 28 #"; cell-get? : exp -> boolean"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"cell-get?"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"cell-get"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 34 #"; cell-get->cell : cell-exp -> exp"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"cell-get->cell"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 2 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0           0 0           0
